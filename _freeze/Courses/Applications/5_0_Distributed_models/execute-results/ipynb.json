{
  "hash": "13ee03ba533e37286fa26c9f4a353dc9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Distributed models with dask\"\n---\n\n\n# Initialization \n\n::: {#6c0e7956 .cell execution_count=1}\n``` {.python .cell-code}\nfrom ipyparallel import Client\n\nrc = Client()\n```\n:::\n\n\n`rc` is an interable of accessibles computing nodes.\n\n::: {#21ea7367 .cell execution_count=2}\n``` {.python .cell-code}\nviews = rc[:]\n```\n:::\n\n\n::: {#65b1e6d1 .cell execution_count=3}\n``` {.python .cell-code}\nviews\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n<DirectView [0, 1, 2, 3,...]>\n```\n:::\n:::\n\n\n## Check cluster engines\n\n::: {#6da27f31 .cell execution_count=4}\n``` {.python .cell-code}\nimport platform\nplatform.node()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'muse190.cluster'\n```\n:::\n:::\n\n\n::: {#cad0ca46 .cell execution_count=5}\n``` {.python .cell-code}\nviews.apply_sync(platform.node)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n['muse191.cluster',\n 'muse195.cluster',\n 'muse194.cluster',\n 'muse193.cluster',\n 'muse197.cluster',\n 'muse196.cluster',\n 'muse198.cluster',\n 'muse190.cluster']\n```\n:::\n:::\n\n\n## Distributed prime numbers\n\nLet's revive our functions\n\n::: {#9bd3d336 .cell execution_count=6}\n``` {.python .cell-code}\nimport math\n\ndef check_prime(n):\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n```\n:::\n\n\n::: {#2612cb80 .cell execution_count=7}\n``` {.python .cell-code}\ndef chunks(lst, n):\n    \"\"\"Yield successive n-sized chunks from lst.\"\"\"\n    for i in range(0, len(lst), n):\n        yield lst[i:i + n]\n```\n:::\n\n\n::: {#28413d87 .cell execution_count=8}\n``` {.python .cell-code}\ndef find_primes(r):\n    return list(filter(check_prime,r))\n```\n:::\n\n\n## Peculiarities\n\nYou'll have to\n- [`push`](https://ipyparallel.readthedocs.io/en/latest/api/ipyparallel.html#ipyparallel.DirectView.push) your dependant functions to the engines (`ipyparallel` does push your main \"mapped\" function, but not its dependancies) \n- explicitly import any required python library to the engines \n\n::: {#1d6e8f51 .cell execution_count=9}\n``` {.python .cell-code}\nviews.push({'check_prime': check_prime})\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<AsyncResult(_push): pending>\n```\n:::\n:::\n\n\n::: {#e46147d3 .cell execution_count=10}\n``` {.python .cell-code}\nwith views.sync_imports():\n    import math\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nimporting math on engine(s)\n```\n:::\n:::\n\n\n### First steps\n\n1. Complete with the correct [`views.map`](https://ipyparallel.readthedocs.io/en/latest/api/ipyparallel.html#ipyparallel.DirectView.map) call\n\n```python\ndef calculate_primes(N,chunksize):\n    return ...\n```\n\n2. Benchmark it for \n\n```python\nN = 5000000\nchunksize = int(N/64)\n```\n\n::: {#e6a838d1 .cell tags='[\"solution\"]' execution_count=11}\n``` {.python .cell-code}\ndef calculate_primes(N,chunksize):\n    return views.map_sync(find_primes,chunks(range(1,N),chunksize))\n```\n:::\n\n\n::: {#e11f9aa3 .cell execution_count=12}\n``` {.python .cell-code}\nN = 5000000\n```\n:::\n\n\n::: {#cf8de496 .cell execution_count=13}\n``` {.python .cell-code}\n%timeit -r 1 -n 1 calculate_primes(N,int(N/64))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.27 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n```\n:::\n:::\n\n\n# (Aside) a network optimization : [broadcast_view](https://ipyparallel.readthedocs.io/en/latest/examples/broadcast/Broadcast%20view.html) (network optimization)\n\n<center>\n<img src=\"attachment:image.png\" width=\"500\"/>\n</center>\n\n::: {#466d7d0a .cell execution_count=14}\n``` {.python .cell-code}\ndirect_view = rc.direct_view()\nbcast_view = rc.broadcast_view()\n```\n:::\n\n\n::: {#922ceb68 .cell execution_count=15}\n``` {.python .cell-code}\n%timeit direct_view.apply_sync(lambda: None)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14.5 ms ± 505 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n::: {#8ee9a9e0 .cell execution_count=16}\n``` {.python .cell-code}\n%timeit bcast_view.apply_sync(lambda: None)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16.7 ms ± 554 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n:::\n:::\n\n\n# An embarrasingly parallel example : distributed Monte-Carlo computing of $\\pi$\n\nIf we sample randomly a bunch of $N$ points in the unity square, and counts all points $N_I$ verifying the condition\n\n$x^2 + y^2 \\le 1$ whichs means they are in the upper right quarter of a disk.\n\nWe have this convergence\n\n$\\lim_{N\\to\\infty} 4\\frac{N_I}{N} = \\pi$\n\n<center>\n    <img src=\"attachment:hpp2_0901.png\" width=\"40%\" />\n</center>\n\n### 2. Write the function which :\n- takes a number of estimates `nbr_estimates` as argument\n- samples them in the [(0,0),(1,1)] unity square\n- returns the number of points inside the disk quarter\n\n```python\ndef estimate_nbr_points_in_quarter_circle(nbr_estimates):\n    ...\n    return nbr_trials_in_quarter_unit_circle\n```\n\n::: {#7db5b846 .cell tags='[\"solution\"]' execution_count=17}\n``` {.python .cell-code}\nwith views.sync_imports():\n    import random\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nimporting random on engine(s)\n```\n:::\n:::\n\n\n::: {#d568df93 .cell tags='[\"solution\"]' execution_count=18}\n``` {.python .cell-code}\ndef estimate_nbr_points_in_quarter_circle(nbr_estimates):\n    nbr_trials_in_quarter_unit_circle = 0\n    for step in range(int(nbr_estimates)):\n        x = random.uniform(0, 1)\n        y = random.uniform(0, 1)\n        is_in_unit_circle = x * x + y * y <= 1.0\n        nbr_trials_in_quarter_unit_circle += is_in_unit_circle\n    return nbr_trials_in_quarter_unit_circle\n```\n:::\n\n\n::: {#517066b3 .cell tags='[\"solution\"]' execution_count=19}\n``` {.python .cell-code}\n4*estimate_nbr_points_in_quarter_circle(1e4)/1e4\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n3.1152\n```\n:::\n:::\n\n\n### 3. Make it distributed\n\n- Wraps the previous function in\n    ```python\n    def calculate_pi_distributed(nnodes,nbr_samples_in_total)\n        ...\n        return estimated_pi\n    ```\n- `nnodes` will use only `rc[:nnodes]` and split the number of estimates for each worker nodes into `nnodes` blocks.\n- Try it on `1e8` samples and benchmark it on 1 to 8 nodes. (use [`time`](https://docs.python.org/3/library/time.html#time.time))\n- Plot the performance gain over one node and comment the plot.\n\n::: {#3466fafd .cell tags='[\"solution\"]' execution_count=20}\n``` {.python .cell-code}\ndef calculate_pi_distributed(nnodes,nbr_samples_in_total):\n    dview = rc[:nnodes]\n    nbr_samples_per_worker = nbr_samples_in_total / nnodes\n    nbr_in_quarter_unit_circles = dview.apply_sync(estimate_nbr_points_in_quarter_circle, \\\n                                                   nbr_samples_per_worker)\n    nbr_jobs = len(nbr_in_quarter_unit_circles)\n    return sum(nbr_in_quarter_unit_circles) * 4 / nbr_samples_in_total\n```\n:::\n\n\n::: {#3941627d .cell tags='[\"solution\"]' execution_count=21}\n``` {.python .cell-code}\ncalculate_pi_distributed(8,1e7)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n3.1412224\n```\n:::\n:::\n\n\n::: {#31e4ba3b .cell tags='[\"solution\"]' execution_count=22}\n``` {.python .cell-code}\nimport time\n\nN = 1e8\ncluster_times = []\npis = []\nfor nbr_parallel_blocks in range(1,9):\n    print(f\"With {nbr_parallel_blocks} node(s): \")\n    t1 = time.time()\n    pi_estimate = calculate_pi_distributed(nbr_parallel_blocks,N)\n    total_time = time.time() - t1\n    print(f\"\\tPi estimate : {pi_estimate}\")\n    print(\"\\tTime : {:.2f}s\".format(total_time))\n    cluster_times.append(total_time)\n    pis.append(pi_estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWith 1 node(s): \n\tPi estimate : 3.1416046\n\tTime : 50.80s\nWith 2 node(s): \n\tPi estimate : 3.14152944\n\tTime : 25.80s\nWith 3 node(s): \n\tPi estimate : 3.14174144\n\tTime : 17.20s\nWith 4 node(s): \n\tPi estimate : 3.14163168\n\tTime : 12.90s\nWith 5 node(s): \n\tPi estimate : 3.14163688\n\tTime : 10.32s\nWith 6 node(s): \n\tPi estimate : 3.14165932\n\tTime : 8.60s\nWith 7 node(s): \n\tPi estimate : 3.14192484\n\tTime : 7.39s\nWith 8 node(s): \n\tPi estimate : 3.14116448\n\tTime : 6.48s\n```\n:::\n:::\n\n\n::: {#b3c335fd .cell tags='[\"solution\"]' execution_count=23}\n``` {.python .cell-code}\nimport plotly.express as px\n\nspeedups_cores = [cluster_times[0]/cluster_times[i] for i in range(8)]\npx.line(y=speedups_cores,x=range(1,9),\n        labels={\"x\":\"Number of cores\",\n                \"y\":\"Speedup over 1 core\"},\n       width=600)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"cb466318-9671-479d-af79-861de2cea689\" class=\"plotly-graph-div\" style=\"height:525px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"cb466318-9671-479d-af79-861de2cea689\")) {                    Plotly.newPlot(                        \"cb466318-9671-479d-af79-861de2cea689\",                        [{\"hovertemplate\":\"Number of cores=%{x}\\u003cbr\\u003eSpeedup over 1 core=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[1,2,3,4,5,6,7,8],\"xaxis\":\"x\",\"y\":[1.0,1.9690958576659248,2.953381765213167,3.937295435899371,4.9205315223301,5.905102438858104,6.876387056813985,7.833832580531577],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Number of cores\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Speedup over 1 core\"}},\"legend\":{\"tracegroupgap\":0},\"width\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('cb466318-9671-479d-af79-861de2cea689');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n$\\Longrightarrow$ We see a near perfect linear scalability.\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /opt/conda/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.5\n---\n",
    "supporting": [
      "5_0_Distributed_models_files/figure-ipynb"
    ],
    "filters": []
  }
}